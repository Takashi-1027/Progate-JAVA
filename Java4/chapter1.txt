オブジェクト指向を学ぼう
このレッスンではプログラミングの最重要概念の一つ「オブジェクト指向」を学びます。
オブジェクト指向とは単なる文法ではなく、アプリケーションをどう作るか、という考え方にあります。
はじめはとっつきにくいものですが、一回ですべてを理解する必要はありません。
まずはイメージを掴んでいくことを意識して学んでいきましょう。


オブジェクト指向とは？
なぜオブジェクト指向を学ぶのか
オブジェクト指向は「人間が楽をする」ための工夫です。プログラムが大規模になると、
人間の頭ではすべてを把握しきれなくなります。楽にプログラムを組み立て、修正できるように、オブジェクト指向が存在します。
そのため、ひとつのアプリケーションを創り上げるためには、必要不可欠の知識だといえるでしょう。

参考画像：Java4_image_1.jpg


オブジェクト指向とは何か
オブジェクトは「もの」、指向は「～を中心に」といった意味で、オブジェクト指向とは「オブジェクト(もの)を中心にした」
という意味になります。
オブジェクト指向は、プログラムの世界に現実世界の「もの」に似たオブジェクトを作り出し、そのオブジェクトを中心にプログラムを組み立てます。
まだイメージはわかないと思いますが、安心してください。

参考画像：Java4_image_2.jpg


オブジェクト指向に触れてみよう
例えば自己紹介プログラムを考えてみましょう。もし2人が自己紹介をするプログラムなら、
プログラムの中にあたかも人間がいるかのように、「人間オブジェクト」を2つ作り、そのオブジェクトたちに自己紹介をさせます。
これがオブジェクト指向の簡単なイメージです。
右の図はまだ理解できなくて大丈夫です。これから順に学習していきます。

参考画像：Java4_image_3.jpg


クラスとインスタンス
オブジェクトの姿
現実世界の「もの」は情報と振る舞いを持っています。例えば人間であれば、「名前」や「年齢」といった情報と、
「あいさつをする」「歩く」といった振る舞いを持っています。
プログラムの中のオブジェクトは現実世界の「もの」を真似たものです。
よって、同じように情報と振る舞いを持つように作ります。

参考画像：Java4_image_4.jpg


クラスとインスタンス
オブジェクト指向で大事なのはクラスとインスタンスです。なお、インスタンスというのはオブジェクトの別名です。
そしてクラスはインスタンスの設計図に当たります。インスタンス（オブジェクト）は、
クラスという設計図をもとに作られるのです。

参考画像：Java4_image_5.jpg


インスタンスの情報と振る舞い
インスタンスは情報と振る舞いを持つことを学びました。この情報と振る舞いは、設計図であるクラスに定義します。
例えば、「名前」「年齢」という情報と「あいさつをする」「歩く」という振る舞いを持つ人間のインスタンスを作るのであれば、
Personというクラスにそれらの情報と振る舞いを定義します。

ここからは考察
つまり、オブジェクトを作る前（作った後？）に、Personクラス（設計図）でそのオブジェクトの情報と振る舞いを定義するということ。

参考画像：Java4_image_6.jpg


クラスとインスタンスのまとめ
JavaⅢでは、クラスを単にメソッドをまとめる部品だと説明しました。しかし、クラスの最大の特徴は、インスタンスの設計図になることです。
また、インスタンスは実体という意味です。オブジェクトの別名がインスタンスなのは、設計図から実際に生み出された実体であるためです。

参考画像：Java4_image_7.jpg


クラス定義とインスタンスの生成
クラスの定義
クラスの基本的な作り方、JavaⅢで学んだことと変わりません。
下図はクラスの中に何も記述されていませんので、まだ白紙の設計図にすぎません。
この白紙の設計図からもインスタンスを生み出すことは可能です。

参考画像：Java4_image_8.jpg


インスタンスの生成
クラスからインスタンスを生成するには「new クラス名()」とします。
下図では殻のクラスをもとにインスタンスを生成しているので、インスタンスはまだ情報も振る舞いも持っていません。

参考画像：Java4_image_9.jpg


インスタンスを変数に代入する
インスタンスは変数に代入して用います。
変数にインスタンスを代入するには「クラス型 変数名 = new クラス()」とします。
これまでは変数名の前にデータ型を指定してきましたが、インスタンスの代入ではクラス型を指定します。
クラス名がそのままクラス型になります。

参考画像：Java4_image_10.jpg


インスタンスを複数生成する
インスタンスは、1つのクラスから何個でも生成できます。設計図をもとに同じようなオブジェクトを簡単に大量に作ることができるのです。
そして同じクラスから作られたインスタンスは、すべて同じ種類の情報(中の値はインスタンスごとに変わり得ます)と
振る舞いを持ちます。詳しくは次のレッスンから学んでいきます。

参考画像：Java4_image_11.jpg


インスタンスの情報と振る舞い
インスタンスは情報と振る舞いを持つことは学びました。インスタンスの情報にあたるものを「インスタンスフィールド」、
振る舞いに当たるものを「インスタンスメソッド」と呼びます。ひとつずつ学習していきますので、まだ覚えなくて大丈夫です。

参考画像：Java4_image_12.jpg


インスタンスメソッドを定義しよう
まずはインスタンスメソッドについて学びましょう。
まずはこのインスタンスにどんな振る舞いをさせたいかを考えます。
人間なので「あいさつ」という振る舞いをつけることにしましょう。
helloというインスタンスメソッドを定義してみます。

参考画像：Java4_image_13.jpg


インスタンスメソッドの定義
インスタンスの振る舞いは、プログラム上ではメソッドで表現します。このインスタンスのメソッドのことを
インスタンスメソッドと呼びます。インスタンスメソッドは「public 戻り値の型 メソッド名()」と定義します。
JavaⅢで学習したメソッドと違い「static」がありません。これについて詳しくは後ほど学びます。

参考画像：Java4_image_14.jpg


インスタンスメソッドの呼び出し
インスタンスメソッドは、インスタンスのメソッドです。クラスに定義しても、実際は各インスタンスに属するという
イメージを持っておきましょう。それゆえ、インスタンスメソッドはインスタンス（を代入した変数）に対して
呼び出します。JavaⅢで学んだメソッド同様、ドット(.)を使って呼び出しますが、「インスタンス名.メソッド名()」
とします。

参考画像：Java4_image_15.jpg


インスタンスフィールド
インスタンスフィールド
続いてインスタンスフィールドについて学びます。インスタンスフィールドとはインスタンスが持つ情報のことでしたね。
人間のインスタンスにどんな情報を持たせたいかを考え、それをクラスに定義しておきます。
人間ですのでまず「名前」という情報を持たせてあげましょう。

参考画像：Java4_image_16.jpg


インスタンスフィールドの定義
インスタンスフィールドは、情報を格納しておく変数にすぎません。
その変数はクラスの一番上に定義します。
注意点として、「public データ型 変数名」というように、変数定義の前に
publicを付けてあげましょう。メソッドやフィールドのpublicの意味は、
このレッスンの最後に学習します。

参考画像：Java4_image_17.jpg


インスタンスのフィールド
インスタンスフィールドを各インスタンスに属します。インスタンスを生成するときに、
各インスタンスにフィールドがコピーされるというイメージで覚えておきましょう。

参考画像：Java4_image_18.jpg


インスタンスフィールドへのアクセス
インスタンスフィールドには、「インスタンス名.フィールド名」というように、
インスタンスに対してドット(.)を用いてアクセスします。
ドットを用いること以外、変数と扱いはあまり変わりません。下図のように、値の取得とセット(代入)が可能です。

参考画像：Java4_image_19.jpg