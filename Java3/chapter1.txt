###メソッドとクラスを学ぼう
このレッスンでは、メソッドとクラスについて学びます。メソッドとクラスを用いることで、
大規模なプログラムをまとまりのある「部品」に切り分け、人間に把握しやすいものにすることができます。
このレッスンを学んで、アプリケーションを作るための準備をしていきましょう！


## メソッドを使ってみよう
# メソッドのイメージ

メソッドとは、何らかの処理を割り当てた部品です。これまでmainメソッドだけに記述してきた処理部分を、メソッドに切り分けていきます。
Javaのファイルを実行すると、自動的にmainメソッドが実行されます。
mainメソッドの処理をメソッドに切り分けると、mainメソッドが各メソッドに指示を出し、
各メソッドが個々の処理を実行するという構造になります。


Java3-image_01.jpg
Java3-image_02.jpg
Java3-image_03.jpg
Java3-image_04.jpg


# メソッドを使ったプログラム

メソッドに切り分けたコードと、そうでないコードを比較してみましょう。
左の図は、mainメソッドの中に処理が羅列されていて、処理の内容やまとまりがわかりにくいですね。
メソッドに切り分けることでコードが整理されます。また、メソッドは何度でも使いまわすことができます。

Java3-image_05.jpg
Java3-image_06.jpg


# メソッドを呼び出してみよう

メソッドとは、処理をまとめた部品だと考えれば、決して難しくはありません。
左の図では、helloというメソッドを定義し、mainメソッドでhelloメソッドを呼び出しています。
詳しくはまだわからなくて大丈夫です。右の図の流れを確認して、まずは演習でメソッドを体験してみましょう。

Java3-image_07.jpg

[Main.java]
----------------------------------------
class Main {
  public static void main(String[] args){
    hello();
  }
  public static void hello(){
    System.out.println("Hello World");
  } 
}
----------------------------------------

[Main.javaを実行すると・・・]
----------------------------------------
1. mainメソッドが呼ばれる
2. mainメソッドの中で、helloメソッドが呼ばれる
3. helloメソッドの中で、
   System.out.println("Hello World")
   が実行される
----------------------------------------

# メソッドの定義

メソッドについて詳しく学んでいきましょう。まずはメソッドの定義です。
「public static void」の部分はまだ定型として覚えておきましょう。
またメソッド名の後の()についても後ほど学びます。ブロック（{}で囲まれた部分）の中に、
そのメソッドが行う処理を記述します。メソッドの名前は好きに付けることができますが、
処理の内容が想像できるような名前をつけましょう。

Java3-image_08.jpg

メソッドの定義
[Main.java]
----------------------------------------
public static void メソッド名(){
  実行する処理;
}
----------------------------------------

[Main.java]
----------------------------------------
public static void hello(){
  System.out.println("Hello World");
}
----------------------------------------

上記の
hello
はメソッド名

System.out.println("Hello World");
は実行する処理


# メソッド定義の場所

メソッドはクラスの中に定義します。下図の具体例では、
helloメソッドはMainクラスのブロック（{}）の中に定義されています。
このようにクラスの中に定義しないとエラーになりますので気をつけましょう。

[Main.java]
-----------------------------------------------------------
class Main {  ←----Mainクラスのブロック
  public static void main(String[] args){
      :
      :
  }
  ----------------------------------------
  | public static void hello(){          |
  |   System.out.println("Hello World"); |  ←---クラスの中にメソッドを定義
  | }                                    |
  ----------------------------------------
}  ←----Mainクラスのブロック


# メソッドの呼び出し
メソッドを呼び出すためには、メソッド名()とするだけです。
呼び出しの時の()を忘れないようにしましょう。詳しくは後ほど学びます。

Java3_image_10.jpgを参考にする！

| Main.java |
-----------------------------------------------------------
class Main {
  public static void main (String[] args){
    hello();
    hello();
  }
  public static void hello() {
    System.out.println("Hello World");
  }
}
-----------------------------------------------------------

| 出力結果 |
-----------------------------------------------------------
Hello World
Hello World
-----------------------------------------------------------


# 引数とは
  引数（ひきすう）とはメソッドに与える追加情報のようなものです。
  メソッドを呼び出すときに、一緒に引数を渡すと、メソッドの中でその値を利用することができます。

Java3_image_11.jpg
Java3_image_12.jpg


# 引数を受け取るメソッド
  メソッドに引数を渡すには、まず引数を受け取れるメソッドを定義しなければなりません。
  そのためには、メソッドの定義部分で、引数を受け取るための箱となる変数（仮引数（かりひきすう））を指定します。
  下図のように、「public static void メソッド名()」の()に仮引数を指定します。
  仮引数は、変数定義と同様に、データ型を指定する必要があります。

- Java3_image_13.jpg

-------------
| Main.java |
-----------------------------------------------------------
public static void メソッド名(データ型 変数名){
  実行する処理;
}

//データ型 変数名: 仮引数
-----------------------------------------------------------

-------------
| Main.java |
-----------------------------------------------------------
public static void hello(String name){

}

//String: 引数のデータ型
//  name: 引数を受け取る変数
-----------------------------------------------------------


# メソッドに引数を渡す
  メソッドに引数を渡すには、メソッド名(引数)としてメソッドを呼び出します。
  渡された引数は、メソッドの仮引数で指定した変数に代入され、
  その変数はメソッドの処理の中で用いることができます。

Java3_image_14.jpgを見る！

-------------
| Main.java |
-----------------------------------------------------------
class Main {
  public static void main(String[] args){
    hello("Bob");
  }

  public static void hello(String name){
    System.out.println(name + "さんこんにちは");
  }
}
-----------------------------------------------------------

-----------
| 出力結果 |
-----------------------------------------------------------

Bobさんこんにちは

-----------------------------------------------------------


# 複数の引数をもつメソッド
  引数は複数渡すこともできます。メソッドが複数の引数を受け取るためには、
  仮引数をコンマ（,）で区切って定義します。
  また、引数は左から順番に「第1引数、第2引数・・・」というように呼びます。
  覚えておきましょう。

Java3_image_15.jpgを見る!

-------------  
| Main.java |
---------------------------------------------------------------------
public static void メソッド名 (データ型 変数名1, データ型 変数名2){
  実行する処理;
}
---------------------------------------------------------------------

-------------
| Main.java |
---------------------------------------------------------------------
public static void printPrice(String item, int price){
  System.out.println(item + "は" + price + "円です");
}
---------------------------------------------------------------------


# 複数の引数を渡してみよう
  それでは、メソッドに複数の引数を渡す様子を見てみましょう。

Java3_image_16.jpg

-------------
| Main.java |
---------------------------------------------------------------------
class Main {
  public static void main(String[] args){
    printPrice("ピザ", 3000);
    printPrice("コーラ", 150);
  }

  public static void printPrice(String item, int price){
    System.out.println(item + "は" + price + "円です");
  }
}
---------------------------------------------------------------------

-----------
| 出力結果 |
---------------------------------------------------------------------
ピザは3000円です
コーラは150円です
---------------------------------------------------------------------


# 引数を渡す順番
  仮引数は任意に順番を決められますが、メソッドを呼び出すときは、
  仮引数の順番通りに引数を渡さなければなりません。
  例えば下図は引数を渡す順序が反対になっています。
  その結果、String型の仮引数に整数を入れようとするので、エラーになってしまいます。

Java3_image_17.jpg を見る!


# メソッドの戻り値
  メソッドの処理結果を、メソッドの呼び出し元で使いたい場合があります。
  このようなときは、メソッドが戻り値（もどりち）を返すようにします。
  メソッドを工場に例えてみましょう。工場（メソッド）は、発注者（mainメソッド）から材料（引数）を受け取り、
  決められた加工（処理）を行って完成品を発注者に返します。この完成品にあたるのが戻り値です。

Java3_image_18.jpgを見る！


# 戻り値のあるメソッド
  メソッドの中でreturnを使うと、returnの値をメソッドの呼び出し元に返すことができます。
  また、戻り値があるメソッドは、戻り値のデータ型を指定します。
  ここまで定型だった「public static void」のvoidの部分で指定します。
  右の図のaddメソッドは、戻り値が整数なので「public static int ...」となります。

Java3_image_19.jpgを見る！

-------------
| Main.java |
----------------------------------------------------------------------
public static 戻り値のデータ型 メソッド名(引数){
  return 戻り値;
}

// return は呼び出し元に値を返すという意味になる。
----------------------------------------------------------------------

-------------
| Main.java |
----------------------------------------------------------------------
public static int add(int a, int b){
  return a + b;
}

// public static int・・・の int は戻り値のデータ型
// a + b が戻り値である。
// return は呼び出し元に値を返すという意味になる。
----------------------------------------------------------------------


# 戻り値の具体例
  戻り値がある場合、メソッドの呼び出し部分がそのまま値に変わります。
  よって、下図のようにメソッドの呼び出し部分を、変数に代入することができます。

Java3_image_20.jpg

-------------
| Main.java |
----------------------------------------------------------------------
public static void main(String[] args){
  int total = add(7,5);
  System.out.println(total);
}
public static int add (int a, int b){
  return a + b;
}

// add(7,5)
// a + b が 7 + 5の結果が戻り値になる
----------------------------------------------------------------------

-----------
| 出力結果 |
----------------------------------------------------------------------
12
----------------------------------------------------------------------


# void
  これまで定型だったvoidとは何でしょうか。voidは戻り値がない、という意味です。
  下図のhelloメソッドには、returnはなく戻り値はありません。
  このように戻り値のない（returnがない）メソッドには、voidを指定します。

Java3_image_21.jpg

-------------
| Main.java |
----------------------------------------------------------------------
public static void hello() {
  System.out.println("こんにちは");
}

// void は戻り値がない。という意味。
// System.out.println("こんにちは"); --- 出 力するだけで値は返さない
----------------------------------------------------------------------


## メソッドのオーバーロード
# 同名のメソッド
  同名のメソッドは原則として定義できません。
  なぜなら同じメソッドが複数存在すると、メソッドを呼び出したときにどのメソッドを用いればいいのか、
  コンピュータがわからなくなってしまうためです。

Java3_image_22.jpgを見よう！

-------------
| Main.java |
----------------------------------------------------------------------
public static void main(String[] args){
  hello();
  // ✕エラー!！
}

public static void hello(){
  System.out.println("こんにちは世界");
}

public static void hello(){
  System.out.println("Hello World");
}

//上記のように、hello()が2つ以上ある、つまり重複してしまっている。
//この状態になると、「どっちのhello()を使ったら良いの？」となってエラーが発生する。
----------------------------------------------------------------------


# オーバーロード
  ただし、引数の型や個数が違う場合は同名のメソッドを定義できます。
  同名のメソッドがあっても、引数が違えばどれを呼べばいいのかコンピュータが判断できるためです。
  このように同名のメソッドを定義することをオーバーロードと言います。

Java3_image_23.jpgを見よう！

-------------
| Main.java |
----------------------------------------------------------------------
public static void main(String[] args){
  hello();
  hello("Bob");
}

public static void hello(){
  System.out.println("こんにちは世界");
}
public static void hello(String name){
  System.out.println("こんにちは" + name + "さん");
}

// 結果:
こんにちは世界
こんにちはBobさん
----------------------------------------------------------------------


## メソッドを組み合わせよう
# メソッドからメソッドを呼ぶ
  メソッドは、mainメソッド以外のメソッドから呼び出すことも可能です。
  プログラムの部品であるメソッドが、相互に助けあってプログラムを形作ります。

Java3_image_24.jpgを見よう！


# メソッドを組み合わせよう
  メソッドから他のメソッドを呼び出してみます。
  averageメソッドは平均を求めるメソッドです。aとbの平均は「(a + b) / 2」で求められますが、
  足し算の部分はaddメソッドを利用しています。
  （(double)はキャストという型変換です。覚えていない人は「JavaⅠ」コースの型変換を復習しておきましょう）

Java3_image_25.jpgをみよう！

-------------
| Main.java |
----------------------------------------------------------------------
public static void main(String[] args){
  System.out.println(average(3,8));
}

public static double average(int a, int b){
  int total = add(a, b);
  return (double)total/2;
}
public static int add(int a, int b){
  return a + b;
}

// 結果：5.5
----------------------------------------------------------------------

