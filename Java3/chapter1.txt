###メソッドとクラスを学ぼう
このレッスンでは、メソッドとクラスについて学びます。メソッドとクラスを用いることで、
大規模なプログラムをまとまりのある「部品」に切り分け、人間に把握しやすいものにすることができます。
このレッスンを学んで、アプリケーションを作るための準備をしていきましょう！


## メソッドを使ってみよう
# メソッドのイメージ

メソッドとは、何らかの処理を割り当てた部品です。これまでmainメソッドだけに記述してきた処理部分を、メソッドに切り分けていきます。
Javaのファイルを実行すると、自動的にmainメソッドが実行されます。
mainメソッドの処理をメソッドに切り分けると、mainメソッドが各メソッドに指示を出し、
各メソッドが個々の処理を実行するという構造になります。


Java3-image_01.jpg
Java3-image_02.jpg
Java3-image_03.jpg
Java3-image_04.jpg


# メソッドを使ったプログラム

メソッドに切り分けたコードと、そうでないコードを比較してみましょう。
左の図は、mainメソッドの中に処理が羅列されていて、処理の内容やまとまりがわかりにくいですね。
メソッドに切り分けることでコードが整理されます。また、メソッドは何度でも使いまわすことができます。

Java3-image_05.jpg
Java3-image_06.jpg


# メソッドを呼び出してみよう

メソッドとは、処理をまとめた部品だと考えれば、決して難しくはありません。
左の図では、helloというメソッドを定義し、mainメソッドでhelloメソッドを呼び出しています。
詳しくはまだわからなくて大丈夫です。右の図の流れを確認して、まずは演習でメソッドを体験してみましょう。

Java3-image_07.jpg

[Main.java]
----------------------------------------
class Main {
  public static void main(String[] args){
    hello();
  }
  public static void hello(){
    System.out.println("Hello World");
  } 
}
----------------------------------------

[Main.javaを実行すると・・・]
----------------------------------------
1. mainメソッドが呼ばれる
2. mainメソッドの中で、helloメソッドが呼ばれる
3. helloメソッドの中で、
   System.out.println("Hello World")
   が実行される
----------------------------------------

# メソッドの定義

メソッドについて詳しく学んでいきましょう。まずはメソッドの定義です。
「public static void」の部分はまだ定型として覚えておきましょう。
またメソッド名の後の()についても後ほど学びます。ブロック（{}で囲まれた部分）の中に、
そのメソッドが行う処理を記述します。メソッドの名前は好きに付けることができますが、
処理の内容が想像できるような名前をつけましょう。

Java3-image_08.jpg

メソッドの定義
[Main.java]
----------------------------------------
public static void メソッド名(){
  実行する処理;
}
----------------------------------------

[Main.java]
----------------------------------------
public static void hello(){
  System.out.println("Hello World");
}
----------------------------------------

上記の
hello
はメソッド名

System.out.println("Hello World");
は実行する処理


# メソッド定義の場所

メソッドはクラスの中に定義します。下図の具体例では、
helloメソッドはMainクラスのブロック（{}）の中に定義されています。
このようにクラスの中に定義しないとエラーになりますので気をつけましょう。

[Main.java]
-----------------------------------------------------------
class Main {  ←----Mainクラスのブロック
  public static void main(String[] args){
      :
      :
  }
  ----------------------------------------
  | public static void hello(){          |
  |   System.out.println("Hello World"); |  ←---クラスの中にメソッドを定義
  | }                                    |
  ----------------------------------------
}  ←----Mainクラスのブロック


# メソッドの呼び出し
メソッドを呼び出すためには、メソッド名()とするだけです。
呼び出しの時の()を忘れないようにしましょう。詳しくは後ほど学びます。

Java3_image_10.jpgを参考にする！

| Main.java |
-----------------------------------------------------------
class Main {
  public static void main (String[] args){
    hello();
    hello();
  }
  public static void hello() {
    System.out.println("Hello World");
  }
}
-----------------------------------------------------------

| 出力結果 |
-----------------------------------------------------------
Hello World
Hello World
-----------------------------------------------------------


# 引数とは
  引数（ひきすう）とはメソッドに与える追加情報のようなものです。
  メソッドを呼び出すときに、一緒に引数を渡すと、メソッドの中でその値を利用することができます。

Java3_image_11.jpg
Java3_image_12.jpg


# 引数を受け取るメソッド
  メソッドに引数を渡すには、まず引数を受け取れるメソッドを定義しなければなりません。
  そのためには、メソッドの定義部分で、引数を受け取るための箱となる変数（仮引数（かりひきすう））を指定します。
  下図のように、「public static void メソッド名()」の()に仮引数を指定します。
  仮引数は、変数定義と同様に、データ型を指定する必要があります。

- Java3_image_13.jpg

-------------
| Main.java |
-----------------------------------------------------------
public static void メソッド名(データ型 変数名){
  実行する処理;
}

//データ型 変数名: 仮引数
-----------------------------------------------------------

-------------
| Main.java |
-----------------------------------------------------------
public static void hello(String name){

}

//String: 引数のデータ型
//  name: 引数を受け取る変数
-----------------------------------------------------------


# メソッドに引数を渡す
  メソッドに引数を渡すには、メソッド名(引数)としてメソッドを呼び出します。
  渡された引数は、メソッドの仮引数で指定した変数に代入され、
  その変数はメソッドの処理の中で用いることができます。

Java3_image_14.jpgを見る！

-------------
| Main.java |
-----------------------------------------------------------
class Main {
  public static void main(String[] args){
    hello("Bob");
  }

  public static void hello(String name){
    System.out.println(name + "さんこんにちは");
  }
}
-----------------------------------------------------------

-----------
| 出力結果 |
-----------------------------------------------------------

Bobさんこんにちは

-----------------------------------------------------------