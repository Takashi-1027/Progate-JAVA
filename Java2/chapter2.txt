## while文
# 繰り返し処理

繰り返し処理とは、一定の処理を自動で繰り返し行う処理のことです。
たとえば、1~100までの数字をコンソールに出力したい場合、
下図のようにSystem.out.println()を100回書くのは面倒です。
こういった処理を自動化するのが繰り返し処理です。

System.out.println(1);
System.out.println(2);
          :
          :
System.out.println(99);
System.out.println(100);

出力結果
1
2
:
:
99
100


# while文

繰り返し処理の代表的なものにwhile文というのがあります。
whileとは「〜の間」という意味の英語です。while文は下図のように書き、
「条件がtrueの間、{ }内の処理を繰り返す」ことができます。

while (条件){
  繰り返す処理;
}


# while文の処理の流れ

下図で、繰り返し処理の流れを見てみましょう。まずwhile文の前で変数の初期化を行います。
この変数は、while文を繰り返すかどうか判断するために用います。処理が一周終わると、
その度に変数は更新され、再び条件式がチェックされます。
trueであればもう一周処理を行い、falseであれば繰り返しが終了します。

int i = 1; -----------------[1]
while (i <= 5){  -----------[2]
  System.out.println(i); ---[3]
  i++;  --------------------[4]
}

繰り返しの処理の流れ

[1] 変数の初期化
[2] 条件
[3] 繰り返す処理
[4] 変数の更新

[1]⇒[2]⇒[3]⇒[4]
      ↑         ↓
      ↑--- ← ---↓


# while文を使ってみよう

while文の具体例を見てみましょう。下図はにんじゃわんこが5回ジャンプを繰り返すプログラムです。
まずはwhile文の外で変数を用意し、ジャンプをする度にその変数に1を足していきます。
そうすると6回目の繰り返しでwhileの条件がfalseになり、繰り返し処理が終了します。

int i = 1;   ← 変数のiを定義
while (i <= 5){
  System.out.println(i + "回ジャンプしました");
  i++;   ← iに1を追加していく
}

下記の画像のような流れになる
java_image_05.jpg


# 無限ループ
int i = 1;
while (i <= 5){
    //永遠にtrueになる
  System.out.println(i + "回ジャンプしました");
              ←  iに1を足し忘れている！
}

出力結果
1回ジャンプしました
1回ジャンプしました
        ：
        ：
1回ジャンプしました
1回ジャンプしました      ←---無限ループになる！


# for文
for文も繰り返し処理の1つです。for文では、forの後の()内に、
「変数の初期化、条件式、変数の更新」の3つを記述します。それぞれはセミコロン（;）で区切りますが、
最後の変数の更新にはセミコロン（;）をつけないことに注意してください。while文と比較して覚えてしまいましょう。

while文
int i = 1; --------------------[1]
while(i <= 5){  ---------------[2]
  System.out.println(i);-------[3]
  i++;-------------------------[4]
}

for文
for (int i =1; i <= 5; i++){
      [1]        [2]    [4]
  System.out.println(i);
            [3]
}

[1] 変数の初期化
[2] 条件
[3] 繰り返す処理
[4] 変数の更新

[1]⇒[2]⇒[3]⇒[4]
      ↑         ↓
      ↑--- ← ---↓


# for文を使ってみよう
前回学習した、にんじゃわんこが5回ジャンプするwhile文の例を、for文で書きかえてみましょう。
繰り返し処理は、while文・for文どちらでも実装できますが、for文の方がすっきりと書けることが多いです。
どちらでも記述できるようにしておきましょう。

for (int i = 1; i <= 5; i++){
  System.out.println(i + "回ジャンプしました");
}


# break

繰り返し処理を終了するためには、条件をfalseにする以外に、breakを使って強制的に終了させる方法があります。
下図のようにif文などの条件分岐と組み合わせることで、任意の箇所で繰り返し処理を終了させることができます。

for (int i = 1; i <= 10; i++){
  ----------------
  | if (i > 5){  |
  |   break;     |   ← 変数iの値が6になった段階でfor文を終了
  | }            |
  ----------------
  System.out.println(i);
}

出力結果
1
2
3
4
5  ←ここで終了する


# continue

繰り返し処理を終了するbreakと違い、continueはその周の処理だけをスキップして、
次の周を実行することができます。continueもif文などと組み合わせて利用するのが一般的です。

for (int i = 1; i <= 10; i++){
  ---------------------
  | if (i % 3 == 0){  |
  |   continue;       |   ← 変数iの値が6になった段階でfor文を終了
  | }                 |
  ---------------------
  System.out.println(i);
}


# 配列とは
配列とは、変数のセットのようなものです。変数が1つしか値を扱えないのに対し、
配列は複数の値をまとめていれておくことができます。配列は仕切りのある箱のようなもので、
それぞれのスペースに値が入っています。配列に入っているそれぞれの値のことを要素と呼びます。

下記の図を見て、イメージしよう!
java_image_06.jpg


# 配列の変数定義

配列を扱う場合には、配列型の変数に配列を代入します。
配列型は、「int型の要素を持つ配列型」「String型の要素を持つ配列型」という風に指定する必要があります。
int型の要素を持つ配列はint[], String型の要素を持つ配列はString[]と記述します。

注意！ []の間にスペースを空けない！
例えば、int[ ]のようにスペースを空けないようにする。
下記の図も参考にしよう！
java_image_07.jpg


# 配列の作り方
配列は{ }の中に、コンマ（,）で区切りながら値を書くことでつくることができます。
下図で配列型の変数に配列を代入しています。[]と{}を混同しないように注意しましょう。
java_image_08.jpg

int型の要素を持つ配列の作成
int[] numbers = {5, 13, 29};

String型の要素を持つ配列の作成
String[] names = {"John", "Kate", "Bob"};

