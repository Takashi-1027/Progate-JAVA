＃1. Javaに触れてみよう
Javaとは、世界中にたくさんの開発者がいる有名な言語です。大規模システムWebアプリケーション、
スマートフォンアプリなど、Javaはあなたの周りの様々な場所で活躍しています。（なお、JavaとJavaScriptは
全くの無関係ですので、混同いないようにしましょう）

Javaを動かしてみよう
それでは、早速、Javaのコードを動かしてみましょう。難しいことはありません。
まずは文字を表示します。Main.javaというファイルのSystem.out.println()の
()の中に文字を書くと、コンソールという画面にその文字が表示されます。

コード
System.out.println("Hello World");


＃2. Javaの基本・文字列


＃文字列
文字をコンソールに出力することができました。先ほど出力した"Hello Java"は、
プログラミングの世界では文字列と呼ばれます。文字列はダブルクォーテーション("")
で囲んで挙げる必要があります。""で囲んでいないと、コードが動かなくなります。

ダブルクォーテーション("")で囲む

System.out.println("Hello World");

//エラー発生！
System.out.println(Hello World);

出力の命令
先ほど用いたSystem.out.println()というのは、「()の中身を出力(表示)せよ」という「命令」です。
プログラミングでは、このようにコンピューターに様々な命令をし処理を行わせます。このレッスンでは
System.out.println()を何度も使うので覚えておきましょう。
なおprintlnの「l」は小文字のエルです。注意しましょう

Javaの構造
Main.javaには、出力の命令以外にもコードが書いてあります。これらは下図のように、
クラス部分、メソッド部分、メソッド内の処理部分に分けられます。
いまはそれぞれの意味を理解する必要はありません。このレッスンでは処理部分にコードを書く、
ということだけ抑えておきましょう。

class Main {
  public static void main(String[] args){
    //ここにコードを書く                      ← 処理部分
  }
}

セミコロン
Javaでは文の終わりにセミコロン（;）を付けなければなりません。
これを忘れるとコードが動かなくなるので、注意しましょう。

System.out.println("Hello World");

コメントの書き方
コード内にはコメントを書くことができます。コメントはコードが実行されるときにすべて無視されるので、
メモなどを残しておくことができます。下図のように「//」と書くことで、そこから行末までがコメントとみなされます。

//この部分はコメントです
System.out.println("Hello World");


＃数値

プログラミングでは、数値を扱うこともできます。数値は文字列と違い、ダブルクォーテーションで囲みません。
数値は左の図のように、数学と同じ記号を用いて、足し算と引き算が可能です。記号はすべて半角で記述します。
また記号の前後の半角スペースはなくても構いませんが、入れた方がコードが見やすくなります。

System.out.println(3);
System.out.println(5 + 2);
System.out.println(8 - 5);

出力結果
3
7
3


＃文字列と数値の違い

プログラミングの世界では、文字列と数値は異なるものです。例えば文字列の"3"と数値の3（" "で囲まない）は別物として扱われます。
また下図のように、5 + 2は7になりますが、"5 + 2"はそのまま「5 + 2」という文字列として出力されます。

System.out.println(5 + 2);
System.out.println("5 + 2");

出力結果
7
5 + 2 


＃数値の計算
その他の計算

数値は足し算・引き算以外にも計算ができます。掛け算は「*」(アスタリスク)、割り算は「/」(スラッシュ)を用います。
また「%」（パーセント）で、割り算の余りを計算することができます。この3つの記号は数学で用いるものと少し違いますので、
しっかり覚えましょう。

System.out.println(3 * 2);
System.out.println(6 / 2);
System.out.println(8 % 5);

出力結果
6
3
3 ⇒8 割る 5 は、1 余り 3


＃文字列の連結

数値の足し算と違い、文字列を「足し算」すると、下図のように文字列を連結することができます。
よって、下図にもあるように、"5" + "3"は2つの文字列を連結し、"53"となります。
ここからも数値と文字列の違いがよくわかります。数値と文字列の違いは常に意識していきましょう。

System.out.println("Ninja" + "Wanko");
System.out.println("5" + "3");
System.out.println(5 + 3);

出力結果(コンソール)
NinjaWanko
53
8


＃データ型

これまで文字列や数値という言葉で値の種類を説明してきましたが、これらは「データ型」と呼ばれます。
まずは下図で文字列と整数のデータ型を覚えましょう。Stringは文字の並び、intは整数(integer)を意味する英語です。
なおString型のSは大文字、int型のiは小文字である点に注意しましょう（この違いの理由はまだ気にしないでください）。

"Hello World" ・・・  String型  ※Sは大文字
(文字列)

3             ・・・  int型 ※iは小文字
(整数)


＃変数とは

ここから変数について学習します。難しく聞こえますが、データ（値）をいれておく箱だと思いましょう。
またその箱（変数）には名前（変数名）がついており、その名前を用いていつでも変数から値を取り出すことができます。
変数はプログラミングの必須の知識なので、しっかり理解していきましょう。

変数の定義
変数を使うには、まず変数を「定義」する必要があります。変数を定義することで値をいれる箱がつくられます。
Javaで変数を定義するためには、①変数にいれる値のデータ型を指定する、②変数の名前を決める、という2つが必要です。

int型の変数定義

int number;
intは①データ型　numberは②変数名

String型の変数定義

String name;
Stringは①データ型　nameは②変数名


＃値の代入

変数を定義したら変数に値を入れます。これを代入と呼びます。
「変数名 = 値」とするだけで代入することができます。
「=」はプログラミングにおいて、右の値を左のものに代入するという意味です。
数学のイコールのように「同じ」を意味するものではありません。

値の代入

int型

int number;
number = 3;

String型

String name;
name = "Sato";


＃変数から値を取り出す

変数から値を取り出すのは難しくありません。下図では、
System.out.println()の()に変数をいれると、
変数の中に入っている値が出力されているのがわかります。
変数は値を一時的にいれる箱にすぎず、変数に対して何らかの処理を行うと、
変数から値が取り出されて処理が行われます。

int number;
number = 10;
System.out.println(number);

String name;
name = "Sato";
System.out.println(name);


＃変数の初期化

下図の「int number = 3;」「String text = "Hello World";」のように、
変数の値の代入は変数定義と同時に行うことができます。
変数定義と同時に値を代入することを変数の初期化と呼びます。覚えておきましょう。

int number = 3;
int numberは変数の定義、= は代入

String text = "Hello World";

※変数の定義と同時に値を代入(= 変数の初期化)


int型変数の計算
数値が入った変数なら、数値と同様に計算が可能です。数値と変数の計算も、変数同士の計算もできます。

int number1 = 10;
System.out.println(number1 + 3);

int number2 = 5;
System.out.println(number1 + number2);

出力結果
13

15


＃String型変数の連結

同様に文字列の入った変数であれば、文字列と同様に、文字列の連結を行うことが可能です。
なお、左の図の波線部にも書いている通り、文字列が入っているからといって変数にダブルクォーテーションを付けてはいけません。
付けてしまうと、変数ではなく文字列として扱われてしまうので注意しましょう。

String greeting = "こんにちは";
system.out.println(greeting + "佐藤さん");

String name = "鈴木さん";
system.out.println(greeting + name);

※nameには変数名には""(ダブクォ)をつけない

出力結果
こんにちは佐藤さん
こんにちは鈴木さん


＃変数の更新

また変数は、中に入っている値を変更することもできます。一度値を代入した変数に、その後再び値を代入すると、
後で代入した値によって変数の中身が上書きされます。下図では、変数を途中で上書きしたことによって、出力結果が変わっています。

変数の定義
String name = "Sato";
System.out.println(name);

変数の中身を上書き
name = "Suzuki";
System.out.println(name);

出力結果
Sato
Suzuki


＃更新時の注意点


変数numberを上書きするために、左の図のように「int number = 5;」とするとエラーになります。
これは、変数名の前にデータ型をつけると変数を定義しようとしますが、
同じ処理内で同一名の変数を定義できないためです。
上書きするときはデータ型をつけないように注意しましょう。

[間違った値の更新方法]
int number = 3;

int number = 5;
上記のように　
新しい変数を定義しようとしているが、
「同じ名前の変数は定義できない」ためエラーになる

[正しい値の更新方法]
int number = 3;

number = 5;
値を更新するときは、データ型をつけない！


＃自己代入
変数xに3が入っているとき、xの値に2を足して5に上書きしたい場合はどうすればよいでしょうか。
この場合は、左の図のように変数xと2を足して、また変数xに代入します。不思議な式に見えますが、
プログラミングでは「=」は代入なので問題はありません。よく使うので覚えておきましょう。
またこのような代入を自己代入と呼びます。

コード
int x = 3;
System.out.println(x);

x = x + 2;

x + 2 は変数xの値「3」に2を足したものをxに代入

System.out.println(x);

出力結果
3

5


＃自己代入の省略した書き方
自己代入には省略した書き方があります。よく使いますので、下図の省略系をしっかり覚えましょう。


    基本形                省略形
    x = x + 10;    ⇒    x += 10;
    x = x - 10;    ⇒    x -= 10;
    x = x * 10;    ⇒    x *= 10;
    x = x / 10;    ⇒    x /= 10;
    x = x % 10;    ⇒    x %= 10;


＃1を足す、1を引く
変数に1を足す、もしくは1を引く場合は、さらなる省略系が存在します。
「++」という記号は変数に「1を足す」という意味です。変数xに対してx++とするのは、
x += 1と同じ意味になります。反対に--とすると1を引くことができます。
便利な書き方なのでぜひ覚えておきましょう。

値が1の時だけさらに省略して書ける！
x = x + 1;    ⇒     x += 1;     ⇒     x++;
x = x - 1;    ⇒     x -= 1;     ⇒     x--;


＃なぜ変数と使うのか
なぜ変数を使うのでしょうか？実際に開発するときには、プログラムの中にありとあらゆる値が登場します。
開発者はそれらを間違いがないように整理し、わかりやすくコードを書き、
そしてすぐに変更できるようにしなければなりません。それを助けるための1つの仕組みが変数です。

1. 何のデータかわかりやすい
2. 同じデータを繰り返し使える
3. 変更に対応しやすい


＃変数の役割

変数の使いどころを見てみましょう。左の図のように、重複する箇所が多い場合は、右の図のように変数にしておくと便利です。
この文章が後で変更になったとしても、変数を用いていればその変数に代入する文字列を1箇所変更するだけで対応することができます。

------------------------------------------------------------------------------------------------------------------
変数を使わなかった場合
------------------------------------------------------------------------------------------------------------------
System.out.println("Aさん、ProgateでJavaをマスターしましょう");
System.out.println("Bさん、ProgateでJavaをマスターしましょう");
System.out.println("Cさん、ProgateでJavaをマスターしましょう");

「Java」の部分を「プログラミング」に書き換えるなら3か所すべて変更しなければならない
------------------------------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------------------
変数を使った場合
------------------------------------------------------------------------------------------------------------------
String text = "Aさん、ProgateでJavaをマスターしましょう";
System.out.println("Aさん、" + text);
System.out.println("Bさん、" + text);
System.out.println("Cさん、" + text);

「Java」の部分を「プログラミング」に書き換えるなら、代入する文字列を1箇所変更するだけでよい
------------------------------------------------------------------------------------------------------------------


＃  変数の注意点
変数にはいくつか決まりがあります。変数名は基本的に自由に決められますが、Javaでは下図のような決まりがあります。
「userName」のように2語以上の変数名を使うときは、単語の始めを大文字にして区切りましょう。
この記述法をキャメルケースと呼びます。

-----------------------------------------------------------------------
◎良い例
    date ・・・ ◎英単語を用いる
userName ・・・ ◎2語以上の場合は大文字で区切る(キャメルケース)
-----------------------------------------------------------------------
-----------------------------------------------------------------------
✕悪い例

✕：エラーが出る  △：望ましくない

       1name ・・・ ✕ 数学開始
  first_name ・・・ △ アンダーバー (スネークケース)
       namae ・・・ △ ローマ字
        名前 ・・・ △ 日本語
-----------------------------------------------------------------------


